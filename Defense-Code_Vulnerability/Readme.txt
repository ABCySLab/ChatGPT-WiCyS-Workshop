buffer_overflow:

#include <stdio.h>
#include<string.h>
#define true 1
#define false 0

int matchUserName(char username[])
{
    if (strcmp(username, "c") == 0 || strcmp(username, "b") == 0 || strcmp(username, "a") == 0)
        return true;
    else
        return false;
}

int main()
{
    char username[5]; // a character array of maximum 5 elements
    int allowedToAccess = 0; //this variable defines if the access is allowed (value of allowedToAccess must be an integer other than 0) or not (value of allowedToAccess must be 0)
    printf("Enter your username: \t");
    gets(username); //getting user input for the username

    if(matchUserName(username))
        allowedToAccess = 1;
    if(allowedToAccess == 0)
        printf("access denied!");
    else
        printf("access permitted");


    return 0;
}

command execution:

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main()
{
    char str[40]; // a character array of 40 elements
    fgets(str, 39, stdin); // getting user input for the character array str
    system(str); // executes a command specified by the string str 
    printf("%s", str);
}

#include <stdio.h>

int main()
{
	int val = 1;
	int* p = NULL; // *p is a NULL pointer which means it does not point to a memory location
	*p = val; // dereferencing the null pointer p by assigning the value of val to the memory location it points to (*p = val;).
	printf("%d", *p);
	return 0;
}
